{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "REST API",
    "description": "This is a REST API documentation with authentication support for token verification."
  },
  "host": "1654d229-3003.inc1.devtunnels.ms",
  "basePath": "/",
  "$schema": "https",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Token for authentication. Use 'Bearer <your-token>'."
    }
  },
  "paths": {
    "/api/user/register": {
      "post": {
        "summary": "Register a new user",
        "description": "This endpoint allows the registration of a new user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "JohnDoe"
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully."
          },
          "400": {
            "description": "Bad request. Invalid input."
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "summary": "Login user",
        "description": "Authenticate a user and return a JWT token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful. JWT token returned."
          },
          "401": {
            "description": "Unauthorized. Invalid credentials."
          }
        }
      }
    },
    "/api/todos/create": {
      "post": {
        "summary": "Create a new todo",
        "description": "Add a new todo item for the authenticated user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Buy groceries"
                },
                "description": {
                  "type": "string",
                  "example": "Milk, eggs, bread, and cheese"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Todo created successfully."
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/api/user/usersall": {
      "get": {
        "summary": "Retrieve all users",
        "description": "Fetch a list of all registered users.",
        "responses": {
          "200": {
            "description": "Successful operation."
          }
        }
      }
    },
    "/api/user/getuser/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Fetch details of a specific user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/user/updateuser/{id}": {
      "put": {
        "summary": "Update user details",
        "description": "Modify the details of a specific user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "NewUsername"
                },
                "email": {
                  "type": "string",
                  "example": "newemail@example.com"
                }
              }
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/user/deleteuser/{id}": {
      "delete": {
        "summary": "Delete a user",
        "description": "Remove a user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/todos/gettodo/{id}": {
      "get": {
        "summary": "Get todo by ID",
        "description": "Retrieve a specific todo item by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Todo item retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "Todo item not found."
          }
        }
      }
    },
    "/api/todos/deletetodo/{id}": {
      "delete": {
        "summary": "Delete a todo",
        "description": "Remove a todo item by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Todo item deleted successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "Todo item not found."
          }
        }
      }
    },
    "/api/todos/updatetodo/{id}": {
      "put": {
        "summary": "Update a todo",
        "description": "Modify a specific todo item by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Updated Title"
                },
                "description": {
                  "type": "string",
                  "example": "Updated Description"
                }
              }
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Todo updated successfully."
          },
          "401": {
            "description": "Unauthorized. Token is missing or invalid."
          },
          "404": {
            "description": "Todo item not found."
          }
        }
      }
    }
  }
}
